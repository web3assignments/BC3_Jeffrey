{"version":3,"sources":["components/Match.js","components/App.js","components/Navbar.js","serviceWorker.js","index.js"],"names":["HDWallet","require","Match","props","console","log","window","web3","Web3","currentProvider","ethereum","enable","contractInfo","eth","net","getId","networkId","MyIdoContract","Contract","abi","networks","address","this","getContract","contract","methods","test","send","from","then","result","contractstuff","getAccounts","accounts","hero","name","rarity","skill_1","skill_name","description","min_skill_damage","max_skill_damage","skill_2","challenger","initFight","estimateGas","gas","beginFight","winnerLog","className","htmlFor","type","id","placeholder","onClick","testContract","Component","App","_isMounted","state","vanityAddress","prefix","i","findlength_plus2","length","newAddress","create","slice","toLowerCase","privateKey","setState","generateVanityAddress","Navbars","Navbar","bg","variant","Brand","Boolean","location","hostname","match","process","NODE_TLS_REJECT_UNAUTHORIZED","env","network","REACT_APP_ETH_NETWORK","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"y85KAGIA,EAAWC,EAAQ,KAWFC,E,kDACjB,WAAYC,GAAQ,IAAD,6BACf,cAAMA,GACNC,QAAQC,MAXRC,OAAOC,OACPD,OAAOC,KAAO,IAAIC,IAAKF,OAAOC,KAAKE,iBACnCH,OAAOI,SAASC,UACT,IAMQ,E,uLAMXJ,EAAO,IAAIC,IAAK,IAAIR,EAAS,mEAAoE,kEAEjGY,EAAeX,EAAQ,K,kBAECM,EAAKM,IAAIC,IAAIC,Q,cAA/BC,E,OACFC,EAAgB,IAAIV,EAAKM,IAAIK,SAC7BN,EAAaO,IACbP,EAAaQ,SAASJ,GAAWK,S,kBAE9BJ,G,kCAGPb,QAAQC,IAAI,e,uRAKKiB,KAAKC,c,cAAtBC,E,gBAEsBA,EAASC,QAAQC,OAAOC,KAAK,CAAEC,KAAK,+CAC7DC,MAAK,SAAAC,GAAW,OAAOA,K,OADpBC,E,OAEJ3B,QAAQC,IAAI0B,G,uRAKST,KAAKC,c,cAAtBC,E,OACAjB,EAAOD,OAAOC,K,SACGA,EAAKM,IAAImB,c,cAA1BC,E,OAEAC,EAAO,CACPC,KAAK,QACLC,OAAQ,EACRC,QAAS,CACLC,WAAW,eACXC,YAAY,oBACZC,iBAAkB,GAClBC,iBAAkB,IAEtBC,QAAS,CACLJ,WAAW,eACXC,YAAY,qBACZC,iBAAkB,GAClBC,iBAAkB,KAItBE,EAAa,CACbR,KAAK,QACLC,OAAQ,EACRC,QAAS,CACLC,WAAW,eACXC,YAAY,oBACZC,iBAAiB,EACjBC,iBAAiB,IAErBC,QAAS,CACLJ,WAAW,eACXC,YAAY,qBACZC,iBAAiB,EACjBC,iBAAiB,K,UAIDjB,EAASC,QAAQmB,UAAUV,EAAMS,GAAYE,YAAY,CAAEjB,KAAKK,EAAS,K,eAA7FY,E,iBACsBrB,EAASC,QAAQmB,UAAUV,EAAMS,GAAYhB,KAAK,CAAEC,KAAKK,EAAS,GAAIa,IAAID,I,eAAhGd,E,OACJ3B,QAAQC,IAAI0B,G,UACUP,EAASC,QAAQsB,aAAapB,KAAK,CAACC,KAAKK,EAAS,K,QAApEe,E,OACJ5C,QAAQC,IAAI2C,G,sIAKN,IAAD,OACL,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBACX,2BAAOC,QAAQ,OAAOD,UAAU,2BAAhC,QACA,yBAAKA,UAAU,aACX,2BAAOA,UAAU,eAAeE,KAAK,QAAQC,GAAG,OAAOC,YAAY,iBAI/E,yBAAKJ,UAAU,YACX,mCAEJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBACX,2BAAOC,QAAQ,YAAWD,UAAU,2BAApC,cACA,yBAAKA,UAAU,aACX,2BAAOA,UAAU,eAAeE,KAAK,QAAQC,GAAG,YAAYC,YAAY,kBAKxF,6BACI,4BAAQF,KAAK,SAASF,UAAU,kBAAkBK,QAAS,kBAAM,EAAKP,eAAtE,aACA,4BAAQI,KAAK,SAASF,UAAU,kBAAkBK,QAAS,kBAAM,EAAKC,iBAAtE,SAEJ,6BACI,yBAAKH,GAAG,iB,GA7GOI,aC+CpBC,E,kDA7Cb,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAXRuD,YAAa,EAYX,EAAKC,MAAQ,CAACC,cAAe,IAFZ,E,iEAPjBtC,KAAKoC,YAAa,I,6CAIlBpC,KAAKoC,YAAa,M,6DAShB,IAQIG,EALAtD,EAAO,IADAN,EAAQ,KAGf6D,EAAI,EAEJC,EADO,QACeC,OAAO,EAGjC,EAAG,CACD,IAAIC,EAAW1D,EAAKM,IAAIoB,SAASiC,SACjCL,EAAOI,EAAW5C,QAAQ8C,MAAM,EAAGJ,GAAkBK,gBAChDN,EAAI,KAAQ,GAAG1D,QAAQC,IAAIyD,SAPvB,SAQFD,GACTzD,QAAQC,IAAR,uCAA4CwD,IAC5CzD,QAAQC,IAAR,kBAAuB4D,EAAW5C,UAClCjB,QAAQC,IAAR,qBAA0B4D,EAAWI,aAErC/C,KAAKgD,SAAS,CAACV,cAAeK,EAAW5C,Y,+BAGnC,IAAD,OACP,OACE,yBAAK4B,UAAU,mBACb,6BACE,mEAEF,6BACE,uDACA,4BAAQE,KAAK,SAASF,UAAU,kBAAkBK,QAAS,kBAAM,EAAKiB,0BAAtE,UACA,0BAAMnB,GAAG,mBAAmB9B,KAAKqC,MAAMC,gBAEzC,kBAAC,EAAD,W,GAlDUJ,a,SCDGgB,G,yDAEjB,WAAYrE,GAAQ,uCACVA,G,qDAIN,OACI,kBAACsE,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,QACzB,kBAACF,EAAA,EAAOG,MAAR,8B,GATqBpB,cCMjBqB,QACW,cAA7BvE,OAAOwE,SAASC,UAEe,UAA7BzE,OAAOwE,SAASC,UAEhBzE,OAAOwE,SAASC,SAASC,MACvB,2D,OCRNC,4JAAYC,6BAA+B,IAC3C,IAAMC,EAAM,CACVC,QAASH,4JAAYI,uBAAyB,eAGhDC,IAASC,OAAO,kBAAC,EAAWJ,GAASK,SAASC,eAAe,WAC7DH,IAASC,OAAO,kBAAC,EAAQJ,GAASK,SAASC,eAAe,SDiGpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,MAAK,SAAAgE,GACjCA,EAAaC,kB","file":"static/js/main.a1c52ce7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\n\nvar HDWallet = require('@truffle/hdwallet-provider');\n\nconst ethEnabled = () => {\n    if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n        window.ethereum.enable();\n        return true;\n    }\n    return false;\n}\n\nexport default class Match extends Component {\n    constructor(props) {\n        super(props)\n        console.log(ethEnabled());\n    }\n\n    async getContract() {\n        var web3 = new Web3(new HDWallet('a334aabbb78c2d2e0730f033bab0d336eae8ee70c183872c3407f3483a997491', \"https://rinkeby.infura.io/v3/84e023c064b1458eaedc358be5c8677a\"))\n        //var web3 = window.web3;\n        var contractInfo = require('../contract-info/HeroesMatch.json');\n        try {\n            const networkId = await web3.eth.net.getId();\n            var MyIdoContract = new web3.eth.Contract(\n                contractInfo.abi,\n                contractInfo.networks[networkId].address\n            );\n            return MyIdoContract;\n        }\n        catch (error) {\n            console.log(\"error \" + error);\n        }\n    }\n\n    async testContract() {\n        let contract = await this.getContract();\n              \n        let contractstuff = await contract.methods.test().send({ from:\"0xB74a342b3b96909247e0E138C2886a347E241255\"})\n        .then(result => {return result});\n        console.log(contractstuff);    \n\n    }\n\n    async beginFight(){\n        let contract = await this.getContract();\n        var web3 = window.web3;\n        var accounts = await web3.eth.getAccounts();\n\n        let hero = {\n            name:\"name1\",\n            rarity: 1,\n            skill_1: {\n                skill_name:\"basic_skill1\",\n                description:\"first basic skill\",\n                min_skill_damage: 10,\n                max_skill_damage: 20\n            },\n            skill_2: {\n                skill_name:\"basic_skill2\",\n                description:\"second basic skill\",\n                min_skill_damage: 10,\n                max_skill_damage: 20\n            }            \n        }\n\n        let challenger = {\n            name:\"name2\",\n            rarity: 2,\n            skill_1: {\n                skill_name:\"basic_skill1\",\n                description:\"first basic skill\",\n                min_skill_damage:5,\n                max_skill_damage:10\n            },\n            skill_2: {\n                skill_name:\"basic_skill2\",\n                description:\"second basic skill\",\n                min_skill_damage:5,\n                max_skill_damage:10\n            }            \n        }\n\n        let estimateGas = await contract.methods.initFight(hero, challenger).estimateGas({ from:accounts[0]});\n        let contractstuff = await contract.methods.initFight(hero, challenger).send({ from:accounts[0], gas:estimateGas});\n        console.log(contractstuff);\n        let winnerLog = await contract.methods.beginFight().send({from:accounts[0]});\n        console.log(winnerLog);\n        \n\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-5\">\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"hero\" className=\"col-sm-2 col-form-label\">Hero</label>\n                            <div className=\"col-sm-10\">\n                                <input className=\"form-control\" type=\"input\" id=\"hero\" placeholder=\"fill name\"></input>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-2\">\n                        <h2>VS</h2>\n                    </div>\n                    <div className=\"col-md-5\">\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"challenge\"className=\"col-sm-2 col-form-label\">Challenger</label>\n                            <div className=\"col-sm-10\">\n                                <input className=\"form-control\" type=\"input\" id=\"challenge\" placeholder=\"fill name\"></input>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.beginFight()}>CHALLENGE</button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.testContract()}>TEST</button>\n                </div>\n                <div>\n                    <div id=\"winner\"></div>\n                </div>\n            </div>\n        )\n    };\n\n}","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport Match from './Match.js'\n\nclass App extends Component {\n  _isMounted = false;\n\n  componentWillMount() { //deprecated\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {vanityAddress: ''};\n  }\n\n  generateVanityAddress(){\n      var vanity = \"\";\n\n      var Web3 = require('web3');\n      var web3 = new Web3;\n\n      var i = 0;\n      var find = \"f4eb7\";\n      var findlength_plus2=find.length+2;\n      var prefix;\n\n      do {\n        var newAddress=web3.eth.accounts.create();\n        prefix=newAddress.address.slice(2, findlength_plus2).toLowerCase();\n        if(++i % 1000 == 0) console.log(i);\n      } while (prefix != find);\n      console.log(`found an address with prefix ${prefix}`);\n      console.log(`address=${newAddress.address}`);\n      console.log(`privateKey=${newAddress.privateKey}`);\n\n      this.setState({vanityAddress: newAddress.address})\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div>\n          <h1>Welcome to the Match of chainuries</h1>\n        </div>\n        <div>\n          <h3>Generate vanity address</h3>\n          <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.generateVanityAddress()}>VANITY</button>\n          <text id=\"generatedVanity\">{this.state.vanityAddress}</text>\n        </div>\n        <Match></Match>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport './css/BalancesERC20.css';\n\nexport default class Navbars extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand>Chains Gathering</Navbar.Brand>\n            </Navbar>\n        )\n    };\n\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* global process */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Navbar from './components/Navbar';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\"\nconst env = {\n  network: process.env.REACT_APP_ETH_NETWORK || 'development', // Default to Ganache CLI\n};\n\nReactDOM.render(<Navbar {...env} />, document.getElementById('navbar'));\nReactDOM.render(<App {...env} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}